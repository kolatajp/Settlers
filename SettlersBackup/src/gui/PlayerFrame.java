package gui;

import boardviewer.BoardViewerPanelManager;
import drawpanel.DrawPanel;
import drawpanel.DrawableObject;
import java.awt.event.MouseEvent;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import mechanics.Card;
import mechanics.CardClass;
import net.ClientManager;
import parser.*;
import solver.Solver;

public class PlayerFrame extends javax.swing.JFrame {
    OverParser overParser;
    GameParser gameParser;
    BoardViewerPanelManager bvpm;
    GUIParser guiParser;

    ClientManager clientManager;

    String playerName = "gracz";

    //pomocnicze i specyficzne dla klienta
    int[] junctionA, junctionB;
    int jAindex = 0, jBindex = 0;
    int junctionLastA, junctionLastB;
    int choosenHex = -1;
    int choosenDevCardIndex = -1;

    //do resourceDev
    int evenResourceIndex = -1;
    int oddResourceIndex = -1;
    int resourceDevClickCount = 0;

    //devRoads
    int devRoadsPlaced = 0;
    boolean placingDevRoads = false;

    boolean preRoll = true;

    /** Creates new form PlayerFrame */
    public PlayerFrame() {
        initComponents();

        //native init
        this.setLocationRelativeTo( null );

        //pakuj i lokalizuj okienka
        this.devCardFrame.pack();
        this.devCardFrame.setLocationRelativeTo( null );

        this.connectFrame.pack();
        this.connectFrame.setLocationRelativeTo( null );

        this.nameChangeFrame.pack();
        this.nameChangeFrame.setLocationRelativeTo( null );

        this.thiefFrame.pack();
        this.thiefFrame.setLocationRelativeTo( null );

        this.resourceChooseFrame.pack();
        this.resourceChooseFrame.setLocationRelativeTo( null );

        this.resourceDevFrame.pack();
        this.resourceDevFrame.setLocationRelativeTo( null );

        //own init
        //bvpm
        this.bvpm = new boardviewer.BoardViewerPanelManager( (DrawPanel) this.boardPanel, null );
        //parsery
        this.gameParser = new parser.GameParser();
        this.guiParser = new parser.GUIParser( bvpm, playerInfoArea, buildRoadButton,
                                               buildTownButton, buildCityButton, devCardBuyButton,
                                               devCardViewButton, devCardList, devCardButtonUse,
                                               tradeWoolGiveSpinner, tradeWoolGetSpinner, tradeWoodGiveSpinner,
                                               tradeWoodGetSpinner, tradeStoneGiveSpinner, tradeStoneGetSpinner,
                                               tradeWheatGiveSpinner, tradeWheatGetSpinner, tradeClayGiveSpinner,
                                               tradeClayGetSpinner, tradeBankButton, tradePlayerButton,
                                               tradePlayerChooseCombobox, tradeZeroAllButton, rollButton, eotButton );
        this.overParser = new parser.OverParser( this.gameParser, guiParser, logBox, chatArea, null );

        //inne wlasne
        this.junctionA = new int[2];
        this.junctionB = new int[2];
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        devCardFrame = new javax.swing.JFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        devCardList = new javax.swing.JList();
        devCardButtonUse = new javax.swing.JButton();
        connectFrame = new javax.swing.JFrame();
        jPanel2 = new javax.swing.JPanel();
        connectAddressField = new javax.swing.JTextField();
        connectButton = new javax.swing.JButton();
        nameChangeFrame = new javax.swing.JFrame();
        nameChangeField = new javax.swing.JTextField();
        nameChangeButton = new javax.swing.JButton();
        thiefFrame = new javax.swing.JFrame();
        jScrollPane2 = new javax.swing.JScrollPane();
        thiefPlayersList = new javax.swing.JList();
        resourceChooseFrame = new javax.swing.JFrame();
        jScrollPane3 = new javax.swing.JScrollPane();
        resourceChooseList = new javax.swing.JList();
        resourceChooseButton = new javax.swing.JButton();
        resourceDevFrame = new javax.swing.JFrame();
        jScrollPane4 = new javax.swing.JScrollPane();
        resourceDevList = new javax.swing.JList();
        resourceDevButton = new javax.swing.JButton();
        boardPanel = new DrawPanel();
        chatPanel = new javax.swing.JPanel();
        chatArea = new java.awt.TextArea();
        chatSendField = new javax.swing.JTextField();
        sendButton = new javax.swing.JButton();
        buildPanel = new javax.swing.JPanel();
        buildRoadButton = new javax.swing.JButton();
        buildTownButton = new javax.swing.JButton();
        buildCityButton = new javax.swing.JButton();
        devCardPanel = new javax.swing.JPanel();
        devCardBuyButton = new javax.swing.JButton();
        devCardViewButton = new javax.swing.JButton();
        tradePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tradeWoolGiveSpinner = new javax.swing.JSpinner();
        tradeWoolGetSpinner = new javax.swing.JSpinner();
        tradeWoodGiveSpinner = new javax.swing.JSpinner();
        tradeWoodGetSpinner = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        tradeStoneGiveSpinner = new javax.swing.JSpinner();
        tradeStoneGetSpinner = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        tradeWheatGiveSpinner = new javax.swing.JSpinner();
        tradeWheatGetSpinner = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        tradeClayGiveSpinner = new javax.swing.JSpinner();
        tradeClayGetSpinner = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        tradeBankButton = new javax.swing.JButton();
        tradePlayerButton = new javax.swing.JButton();
        tradePlayerChooseCombobox = new javax.swing.JComboBox();
        tradeZeroAllButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        logPanel = new javax.swing.JPanel();
        logBox = new java.awt.TextArea();
        playerInfoPanel = new javax.swing.JPanel();
        playerInfoArea = new java.awt.TextArea();
        otherPanel = new javax.swing.JPanel();
        eotButton = new javax.swing.JButton();
        rollButton = new javax.swing.JButton();
        stateLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        connectMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        nameChangeMenuItem = new javax.swing.JMenuItem();

        devCardFrame.setTitle("Karty rozwoju");
        devCardFrame.setResizable(false);

        devCardList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(devCardList);

        devCardButtonUse.setText("Użyj");
        devCardButtonUse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                devCardButtonUseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout devCardFrameLayout = new javax.swing.GroupLayout(devCardFrame.getContentPane());
        devCardFrame.getContentPane().setLayout(devCardFrameLayout);
        devCardFrameLayout.setHorizontalGroup(
            devCardFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(devCardFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(devCardFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(devCardButtonUse, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        devCardFrameLayout.setVerticalGroup(
            devCardFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(devCardFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(devCardButtonUse)
                .addContainerGap())
        );

        connectFrame.setTitle("Połącz");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Adres serwera"));

        connectAddressField.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N

        connectButton.setText("Połącz");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(connectAddressField)
            .addComponent(connectButton, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(connectAddressField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(connectButton))
        );

        javax.swing.GroupLayout connectFrameLayout = new javax.swing.GroupLayout(connectFrame.getContentPane());
        connectFrame.getContentPane().setLayout(connectFrameLayout);
        connectFrameLayout.setHorizontalGroup(
            connectFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(connectFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        connectFrameLayout.setVerticalGroup(
            connectFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(connectFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        nameChangeFrame.setTitle("Nazwa gracza");

        nameChangeField.setText("gracz");

        nameChangeButton.setText("Zmień");
        nameChangeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameChangeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout nameChangeFrameLayout = new javax.swing.GroupLayout(nameChangeFrame.getContentPane());
        nameChangeFrame.getContentPane().setLayout(nameChangeFrameLayout);
        nameChangeFrameLayout.setHorizontalGroup(
            nameChangeFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nameChangeFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nameChangeField, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameChangeButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        nameChangeFrameLayout.setVerticalGroup(
            nameChangeFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nameChangeFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(nameChangeFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameChangeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameChangeButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        thiefFrame.setTitle("Kradzież");
        thiefFrame.setResizable(false);

        thiefPlayersList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        thiefPlayersList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                thiefPlayersListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(thiefPlayersList);

        javax.swing.GroupLayout thiefFrameLayout = new javax.swing.GroupLayout(thiefFrame.getContentPane());
        thiefFrame.getContentPane().setLayout(thiefFrameLayout);
        thiefFrameLayout.setHorizontalGroup(
            thiefFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(thiefFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        thiefFrameLayout.setVerticalGroup(
            thiefFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(thiefFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        resourceChooseFrame.setTitle("Wybierz surowiec");
        resourceChooseFrame.setResizable(false);

        resourceChooseList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Owce", "Drewno", "Kamień", "Zboże", "Glina" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        resourceChooseList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(resourceChooseList);

        resourceChooseButton.setText("Wybierz");
        resourceChooseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resourceChooseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout resourceChooseFrameLayout = new javax.swing.GroupLayout(resourceChooseFrame.getContentPane());
        resourceChooseFrame.getContentPane().setLayout(resourceChooseFrameLayout);
        resourceChooseFrameLayout.setHorizontalGroup(
            resourceChooseFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resourceChooseFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(resourceChooseFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3)
                    .addComponent(resourceChooseButton, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        resourceChooseFrameLayout.setVerticalGroup(
            resourceChooseFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resourceChooseFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resourceChooseButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        resourceDevFrame.setTitle("Wybierz surowce");

        resourceDevList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Owce", "Drewno", "Kamień", "Zboże", "Glina" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        resourceDevList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resourceDevListMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(resourceDevList);

        resourceDevButton.setText("Wybierz");
        resourceDevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resourceDevButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout resourceDevFrameLayout = new javax.swing.GroupLayout(resourceDevFrame.getContentPane());
        resourceDevFrame.getContentPane().setLayout(resourceDevFrameLayout);
        resourceDevFrameLayout.setHorizontalGroup(
            resourceDevFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resourceDevFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(resourceDevFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4)
                    .addComponent(resourceDevButton, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        resourceDevFrameLayout.setVerticalGroup(
            resourceDevFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resourceDevFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(resourceDevButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Osadnicy klient");

        boardPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        boardPanel.setPreferredSize(new java.awt.Dimension(1200, 1200));
        boardPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                boardPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout boardPanelLayout = new javax.swing.GroupLayout(boardPanel);
        boardPanel.setLayout(boardPanelLayout);
        boardPanelLayout.setHorizontalGroup(
            boardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 716, Short.MAX_VALUE)
        );
        boardPanelLayout.setVerticalGroup(
            boardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        chatPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Czat"));
        chatPanel.setMinimumSize(new java.awt.Dimension(60, 20));
        chatPanel.setPreferredSize(new java.awt.Dimension(227, 320));

        chatArea.setEditable(false);
        chatArea.setMinimumSize(new java.awt.Dimension(1, 1));
        chatArea.setPreferredSize(new java.awt.Dimension(60, 300));
        chatArea.setRows(5);

        sendButton.setText("Wyślij");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout chatPanelLayout = new javax.swing.GroupLayout(chatPanel);
        chatPanel.setLayout(chatPanelLayout);
        chatPanelLayout.setHorizontalGroup(
            chatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chatPanelLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(chatSendField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sendButton))
            .addComponent(chatArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        chatPanelLayout.setVerticalGroup(
            chatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chatPanelLayout.createSequentialGroup()
                .addComponent(chatArea, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(chatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sendButton)
                    .addComponent(chatSendField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        buildPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Budowanie"));
        buildPanel.setMaximumSize(new java.awt.Dimension(200, 32767));
        buildPanel.setPreferredSize(new java.awt.Dimension(200, 50));

        buildRoadButton.setText("Buduj drogę");
        buildRoadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buildRoadButtonActionPerformed(evt);
            }
        });

        buildTownButton.setText("Buduj osadę");
        buildTownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buildTownButtonActionPerformed(evt);
            }
        });

        buildCityButton.setText("Buduj miasto");
        buildCityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buildCityButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buildPanelLayout = new javax.swing.GroupLayout(buildPanel);
        buildPanel.setLayout(buildPanelLayout);
        buildPanelLayout.setHorizontalGroup(
            buildPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(buildCityButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(buildTownButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(buildRoadButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        buildPanelLayout.setVerticalGroup(
            buildPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buildPanelLayout.createSequentialGroup()
                .addComponent(buildRoadButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buildTownButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buildCityButton))
        );

        devCardPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Karty rozwoju"));
        devCardPanel.setMaximumSize(new java.awt.Dimension(200, 32767));
        devCardPanel.setPreferredSize(new java.awt.Dimension(200, 50));

        devCardBuyButton.setText("Kup kartę");
        devCardBuyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                devCardBuyButtonActionPerformed(evt);
            }
        });

        devCardViewButton.setText("Obejrzyj karty");
        devCardViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                devCardViewButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout devCardPanelLayout = new javax.swing.GroupLayout(devCardPanel);
        devCardPanel.setLayout(devCardPanelLayout);
        devCardPanelLayout.setHorizontalGroup(
            devCardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(devCardViewButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(devCardBuyButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        devCardPanelLayout.setVerticalGroup(
            devCardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(devCardPanelLayout.createSequentialGroup()
                .addComponent(devCardBuyButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(devCardViewButton))
        );

        tradePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Handel"));
        tradePanel.setMaximumSize(new java.awt.Dimension(200, 32767));
        tradePanel.setPreferredSize(new java.awt.Dimension(200, 50));

        jLabel1.setText("Owce");

        jLabel2.setText("Drewno");

        jLabel3.setText("Kamień");

        jLabel4.setText("Zboże");

        jLabel5.setText("Glina");

        tradeBankButton.setText("Wymień z bankiem/portem");
        tradeBankButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tradeBankButtonActionPerformed(evt);
            }
        });

        tradePlayerButton.setText("Wymień z graczem");

        tradePlayerChooseCombobox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        tradeZeroAllButton.setText("Zeruj");
        tradeZeroAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tradeZeroAllButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Sprzedaję");

        jLabel7.setText("Kupuję");

        javax.swing.GroupLayout tradePanelLayout = new javax.swing.GroupLayout(tradePanel);
        tradePanel.setLayout(tradePanelLayout);
        tradePanelLayout.setHorizontalGroup(
            tradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tradePanelLayout.createSequentialGroup()
                .addGroup(tradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(tradeClayGiveSpinner, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                    .addComponent(tradeWheatGiveSpinner, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tradeStoneGiveSpinner, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tradeWoodGiveSpinner, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tradeWoolGiveSpinner, javax.swing.GroupLayout.Alignment.LEADING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(tradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tradeWoodGetSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                    .addComponent(tradeWoolGetSpinner)
                    .addComponent(tradeStoneGetSpinner)
                    .addComponent(tradeWheatGetSpinner)
                    .addComponent(tradeClayGetSpinner)))
            .addComponent(tradeBankButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(tradePanelLayout.createSequentialGroup()
                .addComponent(tradePlayerButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tradePlayerChooseCombobox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(tradeZeroAllButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(tradePanelLayout.createSequentialGroup()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7))
        );
        tradePanelLayout.setVerticalGroup(
            tradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tradePanelLayout.createSequentialGroup()
                .addGroup(tradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(tradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tradeWoolGiveSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tradeWoolGetSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tradeWoodGiveSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tradeWoodGetSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tradeStoneGiveSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tradeStoneGetSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tradeWheatGiveSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tradeWheatGetSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tradeClayGiveSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tradeClayGetSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tradeBankButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tradePlayerButton)
                    .addComponent(tradePlayerChooseCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tradeZeroAllButton))
        );

        logPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Log"));
        logPanel.setMinimumSize(new java.awt.Dimension(1, 1));
        logPanel.setPreferredSize(new java.awt.Dimension(12, 300));

        logBox.setEditable(false);
        logBox.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        logBox.setMinimumSize(new java.awt.Dimension(1, 60));
        logBox.setPreferredSize(new java.awt.Dimension(60, 60));

        javax.swing.GroupLayout logPanelLayout = new javax.swing.GroupLayout(logPanel);
        logPanel.setLayout(logPanelLayout);
        logPanelLayout.setHorizontalGroup(
            logPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(logBox, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        logPanelLayout.setVerticalGroup(
            logPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(logBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        playerInfoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Informacje o graczu"));
        playerInfoPanel.setPreferredSize(new java.awt.Dimension(209, 165));

        playerInfoArea.setEditable(false);
        playerInfoArea.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N

        javax.swing.GroupLayout playerInfoPanelLayout = new javax.swing.GroupLayout(playerInfoPanel);
        playerInfoPanel.setLayout(playerInfoPanelLayout);
        playerInfoPanelLayout.setHorizontalGroup(
            playerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(playerInfoArea, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        playerInfoPanelLayout.setVerticalGroup(
            playerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(playerInfoArea, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        otherPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Inne"));

        eotButton.setText("Koniec tury");
        eotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eotButtonActionPerformed(evt);
            }
        });

        rollButton.setText("Rzuć kośćmi");
        rollButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rollButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout otherPanelLayout = new javax.swing.GroupLayout(otherPanel);
        otherPanel.setLayout(otherPanelLayout);
        otherPanelLayout.setHorizontalGroup(
            otherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(eotButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(rollButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        otherPanelLayout.setVerticalGroup(
            otherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, otherPanelLayout.createSequentialGroup()
                .addComponent(rollButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(eotButton))
        );

        jMenu1.setText("Gra");

        connectMenuItem.setText("Połącz z serwerem");
        connectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(connectMenuItem);

        menuBar.add(jMenu1);

        jMenu2.setText("Opcje");

        nameChangeMenuItem.setText("Zmień nazwę gracza");
        nameChangeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameChangeMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(nameChangeMenuItem);

        menuBar.add(jMenu2);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(chatPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                    .addComponent(logPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                    .addComponent(stateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(boardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 718, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(buildPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                    .addComponent(devCardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                    .addComponent(tradePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                    .addComponent(playerInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(otherPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(boardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 718, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(chatPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(logPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(playerInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buildPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(devCardPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tradePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(otherPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(46, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void devCardViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_devCardViewButtonActionPerformed
        //wczytaj do listy
        if ( this.overParser.getMechanics().getPlayers()[this.overParser.getPlayerNumber()].getDevelopementCards().size() > 0 ) {
            this.devCardList.setModel( Solver.getListModelFromDevCards( this.overParser.getPlayerNumber(), this.overParser.getMechanics() ) );
        } else {
            this.devCardList.setModel( new DefaultListModel() );
        }
        this.devCardFrame.setVisible( true );
    }//GEN-LAST:event_devCardViewButtonActionPerformed

    private void devCardButtonUseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_devCardButtonUseActionPerformed
        //zapisuje wybrany index karty
        this.choosenDevCardIndex = this.devCardList.getSelectedIndex();
        //jezeli moze uzyc karty
        if ( Solver.getDevCardFromPlayerAtIndex( this.overParser.getPlayerNumber(), this.choosenDevCardIndex, this.overParser.getMechanics() ).isEnabled() ) {
            //zamykam okno
            this.devCardFrame.setVisible( false );
            Card choosenCard = Solver.getDevCardFromPlayerAtIndex( this.overParser.getPlayerNumber(), this.choosenDevCardIndex, this.overParser.getMechanics() );

            //jezeli wybrana karta to rycerz
            if ( choosenCard.getType() == CardClass.KNIGHT ) {
                //wylaczam wszystkie przyciski, zeby zostal tylko zlodziej
                this.overParser.getGuiParser().disableAll();

                //ustawiam tryb devThief
                this.overParser.setPlacingDevThief( true );

                //dodaje log do siebie
                this.logBox.append( "Przestaw złodzieja" + "\n" );

                //sterowanie idzie do boardviewerpanel
            }//jezeli wybrana karta to monopol
            else if ( choosenCard.getType() == CardClass.MONOPOLY ) {
                //wylaczam wszystkie przyciski
                this.overParser.getGuiParser().disableAll();

                //pokazuje wybor surowcow
                //sterowanie idzie do okienka z surowcami
                this.resourceChooseFrame.setVisible( true );

                //dodaje do loga
                this.logBox.append( "Wybierz surowiec w monopolu" + "\n" );
            }//jezeli wybrana karta to surowce / resources
            else if ( choosenCard.getType() == CardClass.RESOURCES ) {
                //wylaczam wszystkie przyciski
                this.overParser.getGuiParser().disableAll();

                //pokazuje wybor surowcow (resDev)
                //ustawiam od nowa listmodel
                this.resourceDevList.setModel( Solver.getListModelFromStringWithNewLines( "Owce\nDrewno\nKamień\nZboże\nGlina" ) );
                this.resourceDevFrame.setVisible( true );

                //zeruje licznik klikniec
                this.resourceDevClickCount = 0;
                this.oddResourceIndex = -1;
                this.evenResourceIndex = -1;

                //sterowanie idzie do okienka
            }//jezeli wybrana karta to drogi
            else if ( choosenCard.getType() == CardClass.ROADS ) {
                //wylaczam wszystkie kontrolki
                //poza buduj droge
                this.overParser.getGuiParser().disableAll();
                this.buildRoadButton.setEnabled( true );

                //ustawiam flage devRoads
                this.placingDevRoads = true;
                this.devRoadsPlaced = 0;

                //wypisuje do loga
                this.logBox.append( "Wybierz droge do postawienia" + "\n" );

                //sterowanie idzie do przycisku buduj droge
            }
            //TODO
        }//jezeli nie moze uzyc karty
        else {
            JOptionPane.showMessageDialog( rootPane, "Karta nieaktywna" );
        }
    }//GEN-LAST:event_devCardButtonUseActionPerformed

    private void connectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectMenuItemActionPerformed
        this.connectFrame.setVisible( true );
    }//GEN-LAST:event_connectMenuItemActionPerformed

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        this.clientManager = new net.ClientManager( this.connectAddressField.getText(), 9191, overParser, logBox );
        this.clientManager.start();
        this.connectFrame.setVisible( false );
    }//GEN-LAST:event_connectButtonActionPerformed

    private void nameChangeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameChangeMenuItemActionPerformed
        this.nameChangeFrame.setVisible( true );
    }//GEN-LAST:event_nameChangeMenuItemActionPerformed

    private void nameChangeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameChangeButtonActionPerformed
        String name = this.nameChangeField.getText();

        if ( name.length() > 30 ) {
            JOptionPane.showMessageDialog( rootPane, "Nick nie może być dłuższy niż 30 znaków" );
        } else if ( name.contains( "_" ) || name.contains( "-" ) ) {
            JOptionPane.showMessageDialog( rootPane, "Nick nie może zawierać podkreślnika ani myślnika" );
        } else {
            this.playerName = name;
            this.nameChangeButton.setEnabled( false );
            this.nameChangeFrame.setVisible( false );
        }
    }//GEN-LAST:event_nameChangeButtonActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        String sendStr = "" + this.overParser.getPlayerNumber() + "_" + this.playerName + "_c_" + this.chatSendField.getText();
        this.clientManager.send( sendStr );
        this.chatSendField.setText( "" );
    }//GEN-LAST:event_sendButtonActionPerformed

    private void boardPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boardPanelMouseClicked
        int x = evt.getX();
        int y = evt.getY();
        DrawableObject[] objects = this.overParser.getGuiParser().getBvpm().getDpm().getObjects( x, y );

        if ( evt.getButton() == MouseEvent.BUTTON1 ) {
            for ( DrawableObject ob : objects ) {
                if ( ob.getId().contains( "junction" ) ) {
                    this.junctionLastA = Integer.parseInt( ob.getId().substring( ob.getId().lastIndexOf( "_" ) + 1 ) );
                    //usun poprzedni mark
                    this.overParser.getGuiParser().getBvpm().getDpm().removeObjectById( "/images/mark.png" );
                    //dodaj nowy
                    this.overParser.getGuiParser().getBvpm().getDpm().addImageToLayer( new DrawableObject( "/images/mark.png", ob.getTopLeftX(), ob.getTopLeftY() ), 0 );
                }
            }
        } else if ( evt.getButton() == MouseEvent.BUTTON3 ) {
            for ( DrawableObject ob : objects ) {
                if ( ob.getId().contains( "junction" ) ) {
                    this.junctionLastB = Integer.parseInt( ob.getId().substring( ob.getId().lastIndexOf( "_" ) + 1 ) );
                    //usun poprzedni mark
                    this.overParser.getGuiParser().getBvpm().getDpm().removeObjectById( "/images/mark2.png" );
                    //dodaj nowy
                    this.overParser.getGuiParser().getBvpm().getDpm().addImageToLayer( new DrawableObject( "/images/mark2.png", ob.getTopLeftX(), ob.getTopLeftY() ), 0 );
                }
            }
        }

        for ( DrawableObject ob : objects ) {
            if ( ob.getId().contains( "hex" ) ) {
                this.choosenHex = Integer.parseInt( ob.getId().substring( ob.getId().lastIndexOf( "_" ) + 1 ) );
            }
        }

        this.overParser.getGuiParser().getBvpm().repaint();

        //jezeli przestawiany zlodziej
        if ( this.overParser.isPlacingThief() ) {
            //TODO
            //pokaz okno kradzenia
            int[] players = Solver.getPlayersFromHex( this.choosenHex, this.overParser.getMechanics() );
            String playerString = "";
            //jesli nie null, czyli jest sa gracze
            if ( players != null ) {
                for ( int i = 0; i < players.length; i++ ) {
                    if ( players[i] == this.overParser.getPlayerNumber() ) {
                        //nie wstawiaj tam siebie
                    } else {
                        playerString += Solver.getPlayerColorStringFromNumber( players[i] ) + "\n";
                    }
                }
            }

            //jezeli sa tam jacys gracze
            if ( playerString.length() > 1 ) {
                //to utworz liste do theifFrame i pokaz je
                DefaultListModel dlm = new DefaultListModel();
                String[] playersInString = playerString.split( "\n" );
                for ( int i = 0; i < playersInString.length; i++ ) {
                    dlm.addElement( playersInString[i] );
                }
                this.thiefPlayersList.setModel( dlm );
                this.thiefFrame.setVisible( true );
                //teraz sterowanie idzie do ramki ze zlodziejem
            } //jezeli nie ma, to nie kradnie, tylko przestawia
            else {
                //wysylam
                //this.clientManager.send( this.overParser.getPlayerNumber() + "_" + this.playerName + "_p_"
                //                         + "thiefmove" +  "-9-" + this.overParser.getPlayerNumber() + "-" + Solver.complementInt( this.choosenHex ) );
                this.clientManager.send( this.overParser.getPlayerNumber() + "_" + this.playerName + "_p_thiefmove-"
                                         + "9" + "-" + this.overParser.getPlayerNumber() + "-" + Solver.complementInt( this.choosenHex ) );
                this.overParser.getGuiParser().enableAll();
                this.overParser.getGuiParser().parse( "9_server_u_disablerollButton" );

            }

            //juz nie przestawiamy zlodzieja
            this.overParser.setPlacingThief( false );

            //zablokuj sobie rzut koscia
            this.rollButton.setEnabled( false );
        }

        //jesli wystawiono rycerza i przestawiany jest zlodziej
        if ( this.overParser.isPlacingDevThief() ) {
            //pokaz okno kradzenia
            int[] players = Solver.getPlayersFromHex( this.choosenHex, this.overParser.getMechanics() );
            String playerString = "";
            //jesli nie null, czyli jest sa gracze
            if ( players != null ) {
                for ( int i = 0; i < players.length; i++ ) {
                    if ( players[i] == this.overParser.getPlayerNumber() ) {
                        //nie wstawiaj tam siebie
                    } else {
                        playerString += Solver.getPlayerColorStringFromNumber( players[i] ) + "\n";
                    }
                }
            }

            //jezeli sa tam jacys gracze
            if ( playerString.length() > 1 ) {
                //to utworz liste do theifFrame i pokaz je
                DefaultListModel dlm = new DefaultListModel();
                String[] playersInString = playerString.split( "\n" );
                for ( int i = 0; i < playersInString.length; i++ ) {
                    dlm.addElement( playersInString[i] );
                }
                this.thiefPlayersList.setModel( dlm );
                this.thiefFrame.setVisible( true );
                //teraz sterowanie idzie do ramki ze zlodziejem
            } //jezeli nie ma, to nie kradnie, tylko przestawia
            else {
                //wysylam
                this.clientManager.send( this.overParser.getPlayerNumber() + "_" + this.playerName + "_p_devknight-"
                                         + this.overParser.getPlayerNumber() + "-" + "9" + "-" + Solver.complementInt( this.choosenHex ) + "-"
                                         + Solver.complementInt( this.choosenDevCardIndex ) );

                //zamykam okno
                this.thiefFrame.setVisible( false );
                //w zaleznosci od flagi rzutu wlaczam kontrolki
                if ( this.preRoll ) {
                    this.overParser.getGuiParser().disableAll();
                    this.overParser.getGuiParser().getRollButton().setEnabled( true );
                    this.overParser.getGuiParser().getDevCardViewButton().setEnabled( true );
                    this.overParser.getGuiParser().getDevCardList().setEnabled( true );
                    this.overParser.getGuiParser().getDevCardButtonUse().setEnabled( true );
                } else {
                    this.overParser.getGuiParser().enableAll();
                    this.overParser.getGuiParser().getRollButton().setEnabled( false );
                }

                //usuwam flage
                this.overParser.setPlacingDevThief( false );
            }
        }
    }//GEN-LAST:event_boardPanelMouseClicked

    private void buildRoadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buildRoadButtonActionPerformed
        //usuwam marki
        //usun poprzedni mark
        this.overParser.getGuiParser().getBvpm().getDpm().removeObjectById( "/images/mark.png" );
        this.overParser.getGuiParser().getBvpm().getDpm().removeObjectById( "/images/mark2.png" );

        //jezeli to setup, to buduje za darmo
        if ( this.overParser.isSetupFase() ) {
            //jezeli nie ma sasiadow, droga dlugosci=1 i nie ma takiej, to ok
            if ( Solver.areJunctionsNeighbours( junctionLastA, junctionLastB )
                 && Solver.areThereNoNeighboursAndNoTownAtJunction( junctionLastA, this.overParser.getMechanics() )
                 && Solver.isRoadBetweenJunctionsFree( junctionLastA, junctionLastB, this.overParser.getMechanics() ) ) {
                //wysylam buduj droge bez kosztu i buduj osade bze kosztu
                this.clientManager.send( this.overParser.getPlayerNumber() + "_" + this.playerName + "_p_nocostroad-"
                                         + this.overParser.getPlayerNumber() + "-" + Solver.complementInt( this.junctionLastA )
                                         + "-" + Solver.complementInt( this.junctionLastB ) );
                this.clientManager.send( this.overParser.getPlayerNumber() + "_" + this.playerName + "_p_nocosttown-"
                                         + this.overParser.getPlayerNumber() + "-" + Solver.complementInt( this.junctionLastA ) );
                this.clientManager.send( this.overParser.getPlayerNumber() + "_" + this.playerName + "_o_setplaced" );
                this.buildRoadButton.setEnabled( false );
            } else {
                JOptionPane.showMessageDialog( rootPane, "Skrzyżowania nie sąsiadują ze sobą\nlub wybrana droga/osada już istnieje\nlub skrzyżowanie ma sąsiadów" );
            }
        } //jezeli nie setup to place normalnie
        else if ( this.placingDevRoads ) {
            //drogi ustawiane z karty rozwoju
            //czy droga laczy sie z osada lub droga tego gracza omg
            if ( !Solver.isRoadConnected( this.junctionLastA, this.junctionLastB, this.overParser.getPlayerNumber(), this.overParser.getMechanics() ) ) {
                //nie laczy sie
                JOptionPane.showMessageDialog( rootPane, "Brak połączenia drogowego" );
            } else {
                //jezeli reszta
                if ( Solver.areJunctionsNeighbours( junctionLastA, junctionLastB )
                     && Solver.isRoadBetweenJunctionsFree( junctionLastA, junctionLastB, this.overParser.getMechanics() ) ) {
                    
                    //droga moze zostac postawiona
                    //zapisz jej koordynaty do pozniejszego wyslania
                    //i postaw lokalnie droge + wypisz log
                    
                    //zwieksz licznik postawionych drog z karty rozwoju
                    this.devRoadsPlaced++;
                    
                    //jezeli to pierwsze droga
                    if ( this.devRoadsPlaced == 1 ) {
                        this.junctionA = new int[2];
                        this.junctionA[0] = this.junctionLastA;
                        this.junctionA[1] = this.junctionLastB;
                    }//jezeli to druga droga
                    else {
                        this.junctionB = new int[2];
                        this.junctionB[0] = this.junctionLastA;
                        this.junctionB[1] = this.junctionLastB;
                        
                        //dezaktywuj przyciski, flage, usun karte i wyslij
                        this.overParser.getGuiParser().disableAll();
                        this.placingDevRoads = false;
                        this.devRoadsPlaced = 0;
                        
                        //usuwam karte
                        this.overParser.getGameParser().parse( "devCard-" + this.overParser.getPlayerNumber() + "-place-" +
                                                               Solver.complementInt( this.choosenDevCardIndex ) );
                        
                        //wysylam
                        this.clientManager.send( this.overParser.getPlayerNumber() + "_" + this.playerName + "_p_devroads-" + this.overParser.getPlayerNumber() +
                                                 "-" + Solver.complementInt( this.junctionA[0] ) + "-" + Solver.complementInt( this.junctionA[1] ) +
                                                 "-" + Solver.complementInt( this.junctionB[0] ) + "-" + Solver.complementInt( this.junctionB[1] ) +
                                                 "-" + Solver.complementInt( this.choosenDevCardIndex ) );
                        
                        //aktywacja reszty przyciskow
                        if ( this.preRoll ) {
                            this.rollButton.setEnabled( true );
                            this.devCardViewButton.setEnabled( true );
                            this.devCardButtonUse.setEnabled( true );
                            this.devCardList.setEnabled( true );
                        } else {
                            this.overParser.getGuiParser().enableAll();
                            this.rollButton.setEnabled( false );
                        }
                    }
                    
                    //postaw droge lokalnie i dodaj log
                    this.overParser.getGameParser().parse( "broad-" + this.overParser.getPlayerNumber() + "-" + Solver.complementInt( this.junctionLastA ) +
                                                           "-" + Solver.complementInt( this.junctionLastB ) );
                    
                    this.logBox.append( "Postawiłeś drogę z karty rozwoju\n" );
                    
                    //po wszystkim przelicz wszystkie drogi itp
                    this.overParser.getGuiParser().getBvpm().reconsiderAll();
                    this.overParser.getGuiParser().getBvpm().repaint();
                } else {
                    JOptionPane.showMessageDialog( rootPane, "Skrzyżowania nie sąsiadują ze sobą\nlub wybrana droga/osada już istnieje" );
                }
            }
        } else {
            //kupuje droge normalnie
            //jezeli nie ma surowcow
            if ( !Solver.doesPlayerHaveResources( "d1c1", this.overParser.getPlayerNumber(), this.overParser.getMechanics() ) ) {
                JOptionPane.showMessageDialog( rootPane, "Nie posiadasz wystarczającej ilości surowców" );
            } else {
                //jezeli ma surowce to sprawdz czy moze postawic droge
                //czy droga laczy sie z osada lub droga tego gracza omg
                if ( !Solver.isRoadConnected( this.junctionLastA, this.junctionLastB, this.overParser.getPlayerNumber(), this.overParser.getMechanics() ) ) {
                    //nie laczy sie
                    JOptionPane.showMessageDialog( rootPane, "Brak połączenia drogowego" );
                } else {
                    //jezeli reszta
                    if ( Solver.areJunctionsNeighbours( junctionLastA, junctionLastB )
                         && Solver.isRoadBetweenJunctionsFree( junctionLastA, junctionLastB, this.overParser.getMechanics() ) ) {
                        //buduje droge
                        this.clientManager.send( this.overParser.getPlayerNumber() + "_" + this.playerName + "_p_buildroad-"
                                                 + this.overParser.getPlayerNumber() + "-" + Solver.complementInt( this.junctionLastA ) + "-"
                                                 + Solver.complementInt( this.junctionLastB ) );
                    } else {
                        JOptionPane.showMessageDialog( rootPane, "Skrzyżowania nie sąsiadują ze sobą\nlub wybrana droga/osada już istnieje" );
                    }
                }
            }

        }
    }//GEN-LAST:event_buildRoadButtonActionPerformed

    private void rollButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rollButtonActionPerformed
        this.clientManager.send( this.overParser.getPlayerNumber() + "_" + this.playerName + "_p_roll" );
        //powinny sie same wylaczyc, jezeli bedzie zlodziej
        //i same wlaczyc, jezeli nie zlodziej

        //ustawiam flage
        this.preRoll = false;
    }//GEN-LAST:event_rollButtonActionPerformed

    private void thiefPlayersListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_thiefPlayersListMouseClicked
        int index = this.thiefPlayersList.getSelectedIndex();
        ListModel lm = this.thiefPlayersList.getModel();
        String[] playersNames = new String[lm.getSize()];
        for ( int i = 0; i < lm.getSize(); i++ ) {
            playersNames[i] = (String) lm.getElementAt( i );
        }
        int playerIndex = Solver.getPlayerNumberFromStringColor( playersNames[index] );
        //deb usun
        System.out.println( playersNames[index] );
        System.out.println( "playerIndex=" + playerIndex );
        //jezeli to nie devKnight
        if ( !this.overParser.isPlacingDevThief() ) {
            //wysylam
            this.clientManager.send( this.overParser.getPlayerNumber() + "_" + this.playerName + "_p_thiefmove-"
                                     + playerIndex + "-" + this.overParser.getPlayerNumber() + "-" + Solver.complementInt( this.choosenHex ) );

            //zamykam okno
            this.thiefFrame.setVisible( false );
            //wlaczam kontrolki wszystkie poza roll
            this.overParser.getGuiParser().enableAll();
            this.rollButton.setEnabled( false );
        } else {
            //jezeli devKnight to wyslij ze devknight
            this.clientManager.send( this.overParser.getPlayerNumber() + "_" + this.playerName + "_p_devknight-"
                                     + this.overParser.getPlayerNumber() + "-" + playerIndex + "-" + Solver.complementInt( this.choosenHex ) + "-"
                                     + Solver.complementInt( this.choosenDevCardIndex ) );

            //zamykam okno
            this.thiefFrame.setVisible( false );
            //w zaleznosci od flagi rzutu wlaczam kontrolki
            if ( this.preRoll ) {
                this.overParser.getGuiParser().disableAll();
                this.overParser.getGuiParser().getRollButton().setEnabled( true );
                this.overParser.getGuiParser().getDevCardViewButton().setEnabled( true );
                this.overParser.getGuiParser().getDevCardList().setEnabled( true );
                this.overParser.getGuiParser().getDevCardButtonUse().setEnabled( true );
            } else {
                this.overParser.getGuiParser().enableAll();
                this.overParser.getGuiParser().getRollButton().setEnabled( false );
            }

            //usuwam flage
            this.overParser.setPlacingDevThief( false );
        }

    }//GEN-LAST:event_thiefPlayersListMouseClicked

    private void eotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eotButtonActionPerformed
        this.overParser.getGuiParser().disableAll();

        //ustawiam flage
        this.preRoll = true;

        //deb usun
        System.out.println( "Info o graczach:\n" );
        for ( int i = 0; i < this.overParser.getMechanics().getPlayers().length; i++ ) {
            System.out.println( Solver.player2InfoStringReal( this.overParser.getMechanics(), i ) );
        }

        //wszystkie karty rozwoju staja sie aktywne
        this.overParser.getMechanics().getPlayers()[this.overParser.getPlayerNumber()].enableAllDevCards();

        //wysylam
        this.clientManager.send( this.overParser.getPlayerNumber() + "_" + this.playerName + "_o_eot" );
    }//GEN-LAST:event_eotButtonActionPerformed

    private void buildTownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buildTownButtonActionPerformed
        //usuwam marki
        //usun poprzedni mark
        this.overParser.getGuiParser().getBvpm().getDpm().removeObjectById( "/images/mark.png" );
        this.overParser.getGuiParser().getBvpm().getDpm().removeObjectById( "/images/mark2.png" );

        //jezeli nie ma surowcow
        if ( !Solver.doesPlayerHaveResources( "d1o1c1h1", this.overParser.getPlayerNumber(), this.overParser.getMechanics() ) ) {
            JOptionPane.showMessageDialog( rootPane, "Nie posiadasz wystarczającej ilości surowców" );
        } else if ( Solver.isTownConnected( this.junctionLastA, this.overParser.getPlayerNumber(), this.overParser.getMechanics() )
                    && Solver.areThereNoNeighboursAndNoTownAtJunction( junctionLastA, this.overParser.getMechanics() ) ) {
            //jezeli nie ma sasiadow i jest polaczone to buduj
            this.clientManager.send( this.overParser.getPlayerNumber() + "_" + this.playerName + "_p_buildtown-"
                                     + this.overParser.getPlayerNumber() + "-" + Solver.complementInt( this.junctionLastA ) );
        } else {
            //komunikat ze niepolaczone lub sasiedzi
            JOptionPane.showMessageDialog( rootPane, "Ze skrzyżowaniem sąsiadują inne osady lub brak połączenia" );
        }
    }//GEN-LAST:event_buildTownButtonActionPerformed

    private void buildCityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buildCityButtonActionPerformed
        //zawsze normalnie buduje

        //usuwam marki
        //usun poprzedni mark
        this.overParser.getGuiParser().getBvpm().getDpm().removeObjectById( "/images/mark.png" );
        this.overParser.getGuiParser().getBvpm().getDpm().removeObjectById( "/images/mark2.png" );

        //jesli nie ma surowcow
        if ( !Solver.doesPlayerHaveResources( "s3h2", this.overParser.getPlayerNumber(), this.overParser.getMechanics() ) ) {
            JOptionPane.showMessageDialog( rootPane, "Nie posiadasz wystarczającej ilości surowców" );
        } else {
            //jezeli ma surowce to sprawdz czy jest tam miasto
            if ( Solver.canCityBeBuiltOnJunction( junctionLastA, this.overParser.getPlayerNumber(), this.overParser.getMechanics() ) ) {
                this.clientManager.send( this.overParser.getPlayerNumber() + "_" + this.playerName + "_p_buildcity-" + this.overParser.getPlayerNumber()
                                         + "-" + Solver.complementInt( this.junctionLastA ) );
            } else {
                //nie ma tam miasta
                JOptionPane.showMessageDialog( rootPane, "Na tym miejscu nie ma twojej osady" );
            }
        }
    }//GEN-LAST:event_buildCityButtonActionPerformed

    private void devCardBuyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_devCardBuyButtonActionPerformed
        //kup karte rozwoju
        if ( Solver.doesPlayerHaveResources( "o1h1s1", this.overParser.getPlayerNumber(), this.overParser.getMechanics() ) ) {
            this.clientManager.send( this.overParser.getPlayerNumber() + "_" + this.playerName + "_p_buydev-" + this.overParser.getPlayerNumber() );
            try {
                Thread.sleep( 300 );
            } catch ( java.lang.InterruptedException e ) {
                JOptionPane.showMessageDialog( rootPane, "Błąd odczekiwania " + e );
            }
            //JOptionPane.showMessageDialog( rootPane, "Kupiłeś " + Solver.devCard2InfoReal( this.overParser.getMechanics().getPlayers()[this.overParser.getPlayerNumber()].getDevelopementCards().getLast() ) );
        } else {
            JOptionPane.showMessageDialog( rootPane, "Nie posiadasz wystarczającej ilości surowców" );
        }
    }//GEN-LAST:event_devCardBuyButtonActionPerformed

    private void resourceChooseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resourceChooseButtonActionPerformed
        //zamykam okno
        this.resourceChooseFrame.setVisible( false );

        //wybrany surowiec
        int resourceChooseIndex = this.resourceChooseList.getSelectedIndex();
        String resourceName = "";
        if ( resourceChooseIndex == 0 ) {
            resourceName = "o";
        } else if ( resourceChooseIndex == 1 ) {
            resourceName = "d";
        } else if ( resourceChooseIndex == 2 ) {
            resourceName = "s";
        } else if ( resourceChooseIndex == 3 ) {
            resourceName = "h";
        } else if ( resourceChooseIndex == 4 ) {
            resourceName = "c";
        }

        //wysylam
        this.clientManager.send( this.overParser.getPlayerNumber() + "_" + this.playerName + "_p_devmonopoly-" + this.overParser.getPlayerNumber() + "-"
                                 + resourceName + "-" + Solver.complementInt( this.choosenDevCardIndex ) );

        //aktywuje wszystkie kontrolki
        //jezeli przed rzutem to aktywuj tylko niektore
        if ( this.preRoll ) {
            this.rollButton.setEnabled( true );
            this.devCardViewButton.setEnabled( true );
            this.devCardButtonUse.setEnabled( true );
            this.devCardList.setEnabled( true );
        } else {
            //po rzucie
            this.overParser.getGuiParser().enableAll();
            this.rollButton.setEnabled( false );
        }
    }//GEN-LAST:event_resourceChooseButtonActionPerformed

    private void resourceDevListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resourceDevListMouseClicked
        //zapisuje wybrany index
        int choosenIndex = this.resourceDevList.getSelectedIndex();
        int indexToCheck = -1;
        int indexToAdd = -1;
        //usuwam zaznaczenie
        this.resourceDevList.setSelectedIndex( -1 );

        //jezeli to pierwszy lub drugi raz
        //nie musze sprawdzac czy gdzies odjac
        if ( this.resourceDevClickCount < 2 ) {
            //dodaje x
            this.resourceDevList.setModel( Solver.resourceDevAddXToIndexInList( choosenIndex, this.resourceDevList.getModel() ) );

            //jesli parzysty to zapisz w parzystym
            if ( this.resourceDevClickCount % 2 == 0 ) {
                this.evenResourceIndex = choosenIndex;
            }//jezeli nieparzysty to zapisz w nieparzystym
            else {
                this.oddResourceIndex = choosenIndex;
                indexToCheck = this.oddResourceIndex;
            }
        } else {
            //jezeli parzysty to zapisz w parzystym
            if ( this.resourceDevClickCount % 2 == 0 ) {
                indexToCheck = this.evenResourceIndex;
                this.evenResourceIndex = choosenIndex;
                indexToAdd = this.evenResourceIndex;
            }//jezeli nieparzysty to zapisz w nieparzystym
            else {
                indexToCheck = this.oddResourceIndex;
                this.oddResourceIndex = choosenIndex;
                indexToAdd = this.oddResourceIndex;
            }

            //sprawdz czy nalezy odjac gdzies x
            if ( Solver.countXOnIndexInList( indexToCheck, this.resourceDevList.getModel() ) > 0 ) {
                //jezeli na indexie do sprawdzenia byl x, to go odejmij
                this.resourceDevList.setModel( Solver.resourceDevSubXToIndexInList( indexToCheck, this.resourceDevList.getModel() ) );
            }
            //dodaj X na miejscu
            this.resourceDevList.setModel( Solver.resourceDevAddXToIndexInList( indexToAdd, this.resourceDevList.getModel() ) );
        }

        //bezwzglednie dodaj licznik klikniec
        this.resourceDevClickCount++;
    }//GEN-LAST:event_resourceDevListMouseClicked

    private void resourceDevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resourceDevButtonActionPerformed
        //zamykam okno
        this.resourceDevFrame.setVisible( false );

        //wysylam
        String resStringSingle = Solver.getResourceStringFromListModel( this.resourceDevList.getModel() );
        //deb usun
        //usun
        System.out.println( "Wybrane surowce:" + resStringSingle );

        this.clientManager.send( this.overParser.getPlayerNumber() + "_" + this.playerName + "_p_devresources-" + this.overParser.getPlayerNumber()
                                 + "-" + resStringSingle + "-" + Solver.complementInt( this.choosenDevCardIndex ) );

        //aktywuje przyciski / kontrolki
        if ( this.preRoll ) {
            this.rollButton.setEnabled( true );
            this.devCardViewButton.setEnabled( true );
            this.devCardButtonUse.setEnabled( true );
            this.devCardList.setEnabled( true );
        } else {
            this.overParser.getGuiParser().enableAll();
            this.rollButton.setEnabled( false );
        }
    }//GEN-LAST:event_resourceDevButtonActionPerformed

    private void tradeZeroAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tradeZeroAllButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tradeZeroAllButtonActionPerformed

    private void tradeBankButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tradeBankButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tradeBankButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main( String args[] ) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for ( javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels() ) {
                if ( "Windows".equals( info.getName() ) ) {
                    javax.swing.UIManager.setLookAndFeel( info.getClassName() );
                    break;
                }
            }
        } catch ( ClassNotFoundException ex ) {
            java.util.logging.Logger.getLogger( PlayerFrame.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
        } catch ( InstantiationException ex ) {
            java.util.logging.Logger.getLogger( PlayerFrame.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
        } catch ( IllegalAccessException ex ) {
            java.util.logging.Logger.getLogger( PlayerFrame.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
        } catch ( javax.swing.UnsupportedLookAndFeelException ex ) {
            java.util.logging.Logger.getLogger( PlayerFrame.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater( new Runnable() {
            public void run() {
                new PlayerFrame().setVisible( true );
            }
        } );
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel boardPanel;
    private javax.swing.JButton buildCityButton;
    private javax.swing.JPanel buildPanel;
    private javax.swing.JButton buildRoadButton;
    private javax.swing.JButton buildTownButton;
    private java.awt.TextArea chatArea;
    private javax.swing.JPanel chatPanel;
    private javax.swing.JTextField chatSendField;
    private javax.swing.JTextField connectAddressField;
    private javax.swing.JButton connectButton;
    private javax.swing.JFrame connectFrame;
    private javax.swing.JMenuItem connectMenuItem;
    private javax.swing.JButton devCardButtonUse;
    private javax.swing.JButton devCardBuyButton;
    private javax.swing.JFrame devCardFrame;
    private javax.swing.JList devCardList;
    private javax.swing.JPanel devCardPanel;
    private javax.swing.JButton devCardViewButton;
    private javax.swing.JButton eotButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private java.awt.TextArea logBox;
    private javax.swing.JPanel logPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton nameChangeButton;
    private javax.swing.JTextField nameChangeField;
    private javax.swing.JFrame nameChangeFrame;
    private javax.swing.JMenuItem nameChangeMenuItem;
    private javax.swing.JPanel otherPanel;
    private java.awt.TextArea playerInfoArea;
    private javax.swing.JPanel playerInfoPanel;
    private javax.swing.JButton resourceChooseButton;
    private javax.swing.JFrame resourceChooseFrame;
    private javax.swing.JList resourceChooseList;
    private javax.swing.JButton resourceDevButton;
    private javax.swing.JFrame resourceDevFrame;
    private javax.swing.JList resourceDevList;
    private javax.swing.JButton rollButton;
    private javax.swing.JButton sendButton;
    private javax.swing.JLabel stateLabel;
    private javax.swing.JFrame thiefFrame;
    private javax.swing.JList thiefPlayersList;
    private javax.swing.JButton tradeBankButton;
    private javax.swing.JSpinner tradeClayGetSpinner;
    private javax.swing.JSpinner tradeClayGiveSpinner;
    private javax.swing.JPanel tradePanel;
    private javax.swing.JButton tradePlayerButton;
    private javax.swing.JComboBox tradePlayerChooseCombobox;
    private javax.swing.JSpinner tradeStoneGetSpinner;
    private javax.swing.JSpinner tradeStoneGiveSpinner;
    private javax.swing.JSpinner tradeWheatGetSpinner;
    private javax.swing.JSpinner tradeWheatGiveSpinner;
    private javax.swing.JSpinner tradeWoodGetSpinner;
    private javax.swing.JSpinner tradeWoodGiveSpinner;
    private javax.swing.JSpinner tradeWoolGetSpinner;
    private javax.swing.JSpinner tradeWoolGiveSpinner;
    private javax.swing.JButton tradeZeroAllButton;
    // End of variables declaration//GEN-END:variables
}
